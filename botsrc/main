<?php

    /** @noinspection PhpDefineCanBeReplacedWithConstInspection */
    /** @noinspection DuplicatedCode */


    /**
     * main is the main execution point for the bot to start polling, this method uses BackgroundWorker to
     * instantly process a batch of updates in the background without waiting for the updates to be completed.
     *
     * In exchange for this performance upgrade, each worker will use up database connections, make sure
     * the database can handle these connections without maxing out
     */

    use BackgroundWorker\BackgroundWorker;
    use Longman\TelegramBot\Exception\TelegramException;
    use ppm\ppm;
    use VerboseAdventure\Abstracts\EventType;
    use VerboseAdventure\Classes\ErrorHandler;
    use VerboseAdventure\VerboseAdventure;

    // Import all required auto loaders
    /** @noinspection PhpIncludeInspection */
    require('ppm');

    /** @noinspection PhpUnhandledExceptionInspection */
    ppm::import('net.intellivoid.spam_protection_bot');

    VerboseAdventure::setStdout(true); // Enable stdout
    ErrorHandler::registerHandlers(); // Register error handlers

    // Load all configurations
    /** @noinspection PhpUnhandledExceptionInspection */
    $TelegramServiceConfiguration = SpamProtectionBot::getTelegramConfiguration();

    /** @noinspection PhpUnhandledExceptionInspection */
    $DatabaseConfiguration = SpamProtectionBot::getDatabaseConfiguration();

    /** @noinspection PhpUnhandledExceptionInspection */
    $BackgroundWorkerConfiguration = SpamProtectionBot::getBackgroundWorkerConfiguration();

    // Create the Telegram Bot instance (NO SQL)

    define('TELEGRAM_BOT_NAME', $TelegramServiceConfiguration['BotName']);
    SpamProtectionBot::setLogHandler(new VerboseAdventure(TELEGRAM_BOT_NAME));

    if(strtolower($TelegramServiceConfiguration['BotName']) == 'true')
    {
        define('TELEGRAM_BOT_ENABLED', true);
    }
    else
    {
        define('TELEGRAM_BOT_ENABLED', false);
    }

    SpamProtectionBot::getLogHandler()->log(EventType::INFO, 'Starting Service', 'Main');
    
    try
    {
        $telegram = new Longman\TelegramBot\Telegram(
            $TelegramServiceConfiguration['BotToken'],
            $TelegramServiceConfiguration['BotName']
        );
    }
    catch (Longman\TelegramBot\Exception\TelegramException $e)
    {
        SpamProtectionBot::getLogHandler()->logException($e, 'Main');
        exit(255);
    }

    $telegram->useGetUpdatesWithoutDatabase();

    // Start the workers using the supervisor
    SpamProtectionBot::getLogHandler()->log(EventType::INFO, 'Starting Supervisor', 'Main');

    try
    {
        SpamProtectionBot::$BackgroundWorker = new BackgroundWorker();
        SpamProtectionBot::$BackgroundWorker->getSupervisor()->setDisplayOutput(TELEGRAM_BOT_NAME, true);
        SpamProtectionBot::getBackgroundWorker()->getClient()->addServer($BackgroundWorkerConfiguration['Host'], (int)$BackgroundWorkerConfiguration['Port']);
        SpamProtectionBot::getBackgroundWorker()->getSupervisor()->startWorkers(
            getcwd() . DIRECTORY_SEPARATOR . 'worker', TELEGRAM_BOT_NAME,
            (int)$BackgroundWorkerConfiguration['MaxWorkers']
        );
    }
    catch(Exception $e)
    {
        SpamProtectionBot::getLogHandler()->logException($e, 'Main');
        exit(255);
    }

    $next_event_update = time() + 60;
    $total_update_count = 0;

    // Start listening to updates
    while(true)
    {
        /** @noinspection PhpUnhandledExceptionInspection */
        SpamProtectionBot::$BackgroundWorker->getSupervisor()->monitor(TELEGRAM_BOT_NAME);

        try
        {
            $server_response = $telegram->handleBackgroundUpdates(SpamProtectionBot::getBackgroundWorker());

            if ($server_response->isOk())
            {
                $update_count = count($server_response->getResult());
                if($update_count > 0)
                {
                    $total_update_count += $update_count;
                    if(time() >= $next_event_update)
                    {
                        SpamProtectionBot::getLogHandler()->log(EventType::INFO, 'Processed $total_update_count update(s)', 'Main');
                        $total_update_count = 0;
                        $next_event_update = time() + 60;
                    }
                }
            }
            else
            {
                SpamProtectionBot::getLogHandler()->log(EventType::ERROR, 'Failed to fetch updates: ' . $server_response->printError(true), 'Main');

            }
        }
        catch (TelegramException $e)
        {
            SpamProtectionBot::getLogHandler()->logException($e, 'Main');
        }
    }
